# generated by datamodel-codegen:
#   filename:  data/ReflectionSetData.json

from __future__ import annotations

from typing import Any, List, Optional

from mxlims.impl.MxlimsBase import BaseModel

from pydantic import Field, PositiveInt, confloat, conint

from ..datatypes.PdbxSignalType import PdbxSignalType
from ..datatypes.ReflectionBinningMode import ReflectionBinningMode
from ..datatypes.ReflectionFileType import ReflectionFileType
from ..datatypes.ReflectionStatistics import ReflectionStatistics
from ..datatypes.SpaceGroupName import SpaceGroupName
from ..datatypes.Tensor import Tensor
from ..datatypes.UnitCell import UnitCell


class ReflectionSetData(BaseModel):
    """
    Set of processed reflections, possibly merged or scaled, as might be stored within a MTZ or mmCIF reflection file
    """

    anisotropic_diffraction: Optional[bool] = Field(
        False,
        alias="anisotropicDiffraction",
        description="Is diffraction limit analysis based on anisotropic diffraction limits? True/False ",
        title="Anisotropic Diffraction",
    )
    space_group_name: Optional[SpaceGroupName] = Field(
        None,
        alias="spaceGroupName",
        description="Name of space group, determined during processing. Names may include alternative settings. Matches mmCIF item symmetry.space_group_name_H-M (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_symmetry.space_group_name_H-M.html).",
        title="Space Group Name",
    )
    refined_unit_cell: Optional[UnitCell] = Field(
        None,
        alias="refinedUnitCell",
        description="Unit cell of crystal, determined during processing.",
    )
    operational_resolution: Optional[float] = Field(
        None,
        alias="operationalResolution",
        description="Operational resolution (A) matching resolutionCutoffs.",
        title="Operational Resolution",
    )
    diffraction_limits_estimated: Optional[Tensor] = Field(
        None,
        alias="diffractionLimitsEstimated",
        description="Principal axes lengths (A) of ellipsoid describing reciprocal space region containing observable reflections, regardless whether all have actually been observed. Matches mmCIF items reflns.pdbx_aniso_diffraction_limit_{1,2,3} (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.pdbx_aniso_diffraction_limit_1.html)",
    )
    wavelengths: Optional[List[confloat(ge=0.0)]] = Field(
        None,
        description="Wavelengths (A) at which reflections were measured",
        title="Wavelengths",
    )
    iso_b_wilson_estimate: Optional[float] = Field(
        None,
        alias="isoBWilsonEstimate",
        description="estimated (isotropic) temperature factor from slope of Wilson plot, matches mmCIF item reflns.B_iso_Wilson_estimate (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.B_iso_Wilson_estimate.html)",
        title="B Iso Wilson Estimate",
    )
    aniso_btensor: Optional[Tensor] = Field(
        None,
        alias="anisoBtensor",
        description="Anisotropic B tensor, matching mmCIF items reflns.pdbx_aniso_B_tensor_eigenvalue_{1,2,3} and reflns.pdbx_aniso_B_tensor_eigenvector_{1,2,3}_ortho[{1,2,3}] (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.pdbx_aniso_B_tensor_eigenvalue_1.html)",
    )
    number_reflections: Optional[conint(ge=0)] = Field(
        None,
        alias="numberReflections",
        description="Total number of measured reflections, matches mmCIF item reflns.pdbx_number_measured_all (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.pdbx_number_measured_all.html)",
        title="Number of Reflections",
    )
    number_reflections_unique: Optional[conint(ge=0)] = Field(
        None,
        alias="numberReflectionsUnique",
        description="Total number of unique reflections, matches mmCIF item reflns.number_obs (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.number_obs.html)",
        title="Number Reflections Unique",
    )
    h_index_range: Optional[List] = Field(
        None,
        alias="hIndexRange",
        description="low and high limit on Miller index h, matches mmCIF item reflns.limit_h_min (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.limit_h_min.html) and reflns.limit_h_max (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.limit_h_max.html)",
        max_length=2,
        min_length=2,
        title="H Index Range",
    )
    k_index_range: Optional[List] = Field(
        None,
        alias="kIndexRange",
        description="low and high limit on Miller index k, matches mmCIF item reflns.limit_k_min (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.limit_k_min.html) and reflns.limit_k_max (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.limit_k_max.html)",
        max_length=2,
        min_length=2,
        title="K Index Range",
    )
    l_index_range: Optional[List] = Field(
        None,
        alias="lIndexRange",
        description="low and high limit on Miller index l, matches mmCIF item reflns.limit_l_min (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.limit_l_min.html) and reflns.limit_l_max (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.limit_l_max.html)",
        max_length=2,
        min_length=2,
        title="L Index Range",
    )
    possible_twinning: Optional[bool] = Field(
        False,
        alias="possibleTwinning",
        description="ARe there data to indicate that the crystal might be twinned?",
        title="Possible Twinning",
    )
    twin_fraction: Optional[confloat(ge=0.0, le=1.0)] = Field(
        None,
        alias="twinFraction",
        description="The calculated twin fraction of the crystal",
        title="Twin fraction",
    )
    reflection_statistics_overall: Optional[ReflectionStatistics] = Field(
        None,
        alias="reflectionStatisticsOverall",
        description="Reflection statistics for all processed reflections",
    )
    reflection_statistics_shells: Optional[List[ReflectionStatistics]] = Field(
        None,
        alias="reflectionStatisticsShells",
        description="Reflection statistics per resolution shell",
        title="Reflection Statistics Shells",
    )
    signal_type: Optional[PdbxSignalType] = Field(
        None,
        alias="signalType",
        description="'local <I/sigmaI>', 'local wCC_half'; matches reflns.pdbx_signal_type (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.pdbx_signal_type.html). Criterion for observability, as used in mmCIF refln.pdbx_signal_status (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_refln.pdbx_signal_status.html)",
    )
    signal_cutoff: Optional[float] = Field(
        None,
        alias="signalCutoff",
        description="Limiting value for signal calculation; matches reflns.pdbx_observed_signal_threshold (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_reflns.pdbx_observed_signal_threshold.html). Cutoff for observability, as used in mmCIF refln.pdbx_signal_status (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_refln.pdbx_signal_status.html)",
        title="Signal Cutoff",
    )
    resolution_cutoffs: Optional[Any] = Field(
        None,
        alias="resolutionCutoffs",
        description="Criteria used in determination of isotropic resolution cut-off (e.g. as implemented in MRFANA, https://github.com/githubgphl/MRFANA)",
        title="Resolution Cutoffs",
    )
    binning_mode: Optional[ReflectionBinningMode] = Field(
        None,
        alias="binningMode",
        description="Binning mode for definition of resolution shells",
    )
    number_bins: Optional[PositiveInt] = Field(
        None, alias="numberBins", description="Number of bins", title="Number Bins"
    )
    reflections_per_bin: Optional[PositiveInt] = Field(
        None,
        alias="reflectionsPerBin",
        description="Number of reflections per bin",
        title="Reflections Per Bin",
    )
    reflections_per_bin_per_sweep: Optional[PositiveInt] = Field(
        None,
        alias="reflectionsPerBinPerSweep",
        description="Number of reflections per bin per sweep (in multi-sweep experiment)",
        title="Reflections Per Bin Per Sweep",
    )
    resolution_rings_detected: Optional[List[List]] = Field(
        None,
        alias="resolutionRingsDetected",
        description="Resolution rings detected as originating from ice, powder diffraction etc.; given as a pair of floats (A) with decreasing value, i.e. low- and high-resolution limits",
        title="Resolution Rings Detected",
    )
    resolution_rings_excluded: Optional[List[List]] = Field(
        None,
        alias="resolutionRingsExcluded",
        description="Resolution rings excluded from calculation; given as a pair of floats (A) with decreasing value, i.e. low- and high-resolution limits)",
        title="Resolution Rings Excluded",
    )
    file_type: Optional[ReflectionFileType] = Field(
        None, alias="fileType", description="Type of file"
    )
    filename: Optional[str] = Field(None, description="File name.", title="Filename")
    path: Optional[str] = Field(
        None,
        description="Path to directory containing reflection set file (defined by filename).",
        title="Path",
    )
