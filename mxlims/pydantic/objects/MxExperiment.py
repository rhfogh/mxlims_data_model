# generated by datamodel-codegen:
#   filename:  objects/MxExperiment.json

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import Field

from ..data.MxExperimentData import MxExperimentData
from ..references.CollectionSweepRef import CollectionSweepRef
from ..references.CrystallographicSampleRef import CrystallographicSampleRef
from ..references.CrystalRef import CrystalRef
from ..references.DropRegionRef import DropRegionRef
from ..references.MxExperimentRef import MxExperimentRef
from ..references.MxlimsRef import MxlimsRef
from ..references.PinPositionRef import PinPositionRef
from ..references.PinRef import PinRef
from ..references.PlateWellRef import PlateWellRef
from ..references.ReflectionSetRef import ReflectionSetRef
from ..references.WellDropRef import WellDropRef
from .Job import Job


class MxExperiment(MxExperimentData, Job):
    """
    Crystallography experiment, with typed JSON containment lists
    """

    sample_ref: Optional[CrystallographicSampleRef] = Field(None, alias="sampleRef")
    started_from_ref: Optional[MxExperimentRef] = Field(None, alias="startedFromRef")
    logistical_sample_ref: Optional[
        Union[
            CrystalRef, PinRef, PinPositionRef, PlateWellRef, WellDropRef, DropRegionRef
        ]
    ] = Field(None, alias="logisticalSampleRef")
    reference_data_refs: Optional[List[ReflectionSetRef]] = Field(
        None, alias="referenceDataRefs"
    )
    template_data_refs: Optional[List[CollectionSweepRef]] = Field(
        None, alias="templateDataRefs"
    )
    input_data_refs: Optional[List[MxlimsRef]] = Field(
        None, alias="inputDataRefs", max_length=0
    )
