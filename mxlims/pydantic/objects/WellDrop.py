# generated by mxlims/scripts
#  filename WellDrop.py

from __future__ import annotations
from typing import Optional, Union
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.WellDropData import WellDropData
from .CollectionSweep import CollectionSweep
from .CrystallographicSample import CrystallographicSample
from .DropRegion import DropRegion
from .MxExperiment import MxExperiment
from .MxProcessing import MxProcessing
from .PlateWell import PlateWell
from .ReflectionSet import ReflectionSet

class WellDrop(WellDropData, LogisticalSampleData, LogisticalSample):
    """MXLIMS pydantic model class for WellDrop
    """
    
    @property
    def container(self) -> Optional[PlateWell]:
        """getter for WellDrop.container"""
        return self.objects_by_id["LogisticalSample"].get(self.container_id)
    
    @container.setter
    def container(self, value: Optional[PlateWell]):
        """setter for WellDrop.container"""
        if value:
            if not isinstance(value, PlateWell):
                raise ValueError(
                    "container must be of type PlateWell"
                )
            self.container_id = value.uuid
        else:
            self.container_id = None

    @property
    def contents(self) -> list[DropRegion]:
        """getter for WellDrop.contents list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["LogisticalSample"]:
            if uid == obj.container_id:
                result.append(obj)
        return result
    
    @property
    def datasets(self) -> list[Union[CollectionSweep, ReflectionSet]]:
        """getter for WellDrop.datasets list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Dataset"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for WellDrop.jobs list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Job"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def sample(self) -> Optional[CrystallographicSample]:
        """getter for WellDrop.sample"""
        return self.objects_by_id["PreparedSample"].get(self.sample_id)
    
    @sample.setter
    def sample(self, value: Optional[CrystallographicSample]):
        """setter for WellDrop.sample"""
        if value:
            if not isinstance(value, CrystallographicSample):
                raise ValueError(
                    "sample must be of type CrystallographicSample"
                )
            self.sample_id = value.uuid
        else:
            self.sample_id = None
