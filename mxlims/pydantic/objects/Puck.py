# generated by mxlims/scripts
#  filename Puck.py

from __future__ import annotations
from typing import Optional, Union
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.PuckData import PuckData
from .Dewar import Dewar
from .Pin import Pin

class Puck(PuckData, LogisticalSampleData, LogisticalSample):
    """MXLIMS pydantic model class for Puck
    """
    
    @property
    def container(self) -> Optional[Dewar]:
        """getter for Puck.container"""
        return self.objects_by_id["LogisticalSample"].get(self.container_id)
    
    @container.setter
    def container(self, value: Optional[Dewar]):
        """setter for Puck.container"""
        if value:
            if not isinstance(value, Dewar):
                raise ValueError(
                    "container must be of type Dewar"
                )
            self.container_id = value.uuid
        else:
            self.container_id = None

    @property
    def contents(self) -> list[Pin]:
        """getter for Puck.contents list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["LogisticalSample"]:
            if uid == obj.container_id:
                result.append(obj)
        return result
    