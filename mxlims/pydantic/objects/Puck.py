# generated by mxlims/impl/generate_code.py
#  filename Puck.py

# NB UUID has to be imported to avoid pydantic errors ??
from __future__ import annotations
from pydantic import Field
from typing import Any, Literal, Optional, Union, TYPE_CHECKING
# from uuid import UUID, uuid1
from ..objects.LogisticalSample import LogisticalSample
from ..data.PuckData import PuckData
if TYPE_CHECKING:
    from .Dewar import Dewar
    from .MultiPin import MultiPin
    from .Pin import Pin

class Puck(PuckData, LogisticalSample):
    """MXLIMS pydantic model class for Puck
    """
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        LogisticalSample.__init__(self, **data)
        
    mxlims_type: Literal["Puck"] = Field(
        "Puck",
        alias="mxlimsType",
        description="The type of MXLIMS object.",
        title="MxlimsType",
        frozen=True,
    )
    
    @property
    def container(self) -> Optional[Dewar]:
        """getter for Puck.container"""
        return self._get_link_n1("LogisticalSample", "container_id")

    @container.setter
    def container(self, value: Optional[Dewar]):
        """setter for Puck.container"""
        from .Dewar import Dewar

        if value is None or isinstance(value, Dewar):
            self._set_link_n1("LogisticalSample", "container_id", value)
        else:
            raise ValueError("container must be of type Dewar or None")

    @property
    def contents(self) -> list[Union[MultiPin, Pin]]:
        """getter for Puck.contents list"""
        return self._get_link_1n("LogisticalSample", "container_id")

    @contents.setter
    def contents(self, values: list[Union[MultiPin, Pin]]):
        """setter for Puck.contents list"""
        from .MultiPin import MultiPin
        from .Pin import Pin

        for obj in values:
            if not isinstance(obj, Union[MultiPin, Pin]):
                raise ValueError("%s is not of type Union[MultiPin, Pin]" % obj)
        self._set_link_1n_rev("LogisticalSample", "container_id", values)
