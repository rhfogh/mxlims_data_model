# generated by mxlims/impl/generate_code.py
#  filename Sample.py

from __future__ import annotations
from pydantic import Field
from typing import List, Literal, Optional, TYPE_CHECKING
from uuid import UUID, uuid1
from mxlims.core.MxlimsObject import MxlimsObject
from ..data.SampleData import SampleData
if TYPE_CHECKING:
    from .Job import Job
    from .LogisticalSample import LogisticalSample

class Sample(SampleData, MxlimsObject):
    """MXLIMS pydantic model class for Sample
    """
        
    mxlims_base_type: Literal["Sample"] = Field(
        "Sample",
        alias="mxlimsBaseType",
        description="The abstract (super)type of MXLIMS object.",
        title="MxlimsBaseType",
        exclude=True,
        frozen=True
    )
    mxlims_type: str = Field(
        "Sample",
        alias="mxlimsType",
        description="The type of MXLIMS object.",
        title="MxlimsType",
        frozen=True,
    )
    uuid: Optional[UUID] = Field(
        default_factory=uuid1,
        description="Permanent unique identifier string",
        title="Uuid",
        frozen=True
    )

    medium_id: Optional[UUID] = Field(
        None,
        alias="mediumId",
        description="uuid for medium making up Sample",
        title="mediumId",
    )
    main_component_id: Optional[UUID] = Field(
        None,
        alias="mainComponentId",
        description="uuid for main component (e.g. macromolecule) making up Sample",
        title="mainComponentId",
    )
    @property
    def jobs(self) -> list[Job]:
        """Abstract superclass - dummy getter for Sample.jobs list"""
        return []

    @property
    def logistical_samples(self) -> list[LogisticalSample]:
        """Abstract superclass - dummy getter for Sample.logistical_samples list"""
        return []

    @property
    def main_component(self) -> Optional[Sample]:
        """Abstract superclass - dummy getter for Sample.main_component"""
        return None

    @property
    def main_samples(self) -> list[Sample]:
        """Abstract superclass - dummy getter for Sample.main_samples list"""
        return []

    @property
    def medium(self) -> Optional[Sample]:
        """Abstract superclass - dummy getter for Sample.medium"""
        return None

    @property
    def medium_samples(self) -> list[Sample]:
        """Abstract superclass - dummy getter for Sample.medium_samples list"""
        return []
