# generated by mxlims/scripts
#  filename DropRegion.py

from __future__ import annotations
from typing import Optional, Union
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.DropRegionData import DropRegionData
from .CollectionSweep import CollectionSweep
from .Crystal import Crystal
from .CrystallographicSample import CrystallographicSample
from .MxExperiment import MxExperiment
from .MxProcessing import MxProcessing
from .ReflectionSet import ReflectionSet
from .WellDrop import WellDrop

class DropRegion(DropRegionData, LogisticalSampleData, LogisticalSample):
    """MXLIMS pydantic model class for DropRegion
    """
    
    @property
    def container(self) -> Optional[WellDrop]:
        """getter for DropRegion.container"""
        return self.objects_by_id["LogisticalSample"].get(self.container_id)
    
    @container.setter
    def container(self, value: Optional[WellDrop]):
        """setter for DropRegion.container"""
        if value:
            if not isinstance(value, WellDrop):
                raise ValueError(
                    "container must be of type WellDrop"
                )
            self.container_id = value.uuid
        else:
            self.container_id = None

    @property
    def contents(self) -> list[Crystal]:
        """getter for DropRegion.contents list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["LogisticalSample"]:
            if uid == obj.container_id:
                result.append(obj)
        return result
    
    @property
    def datasets(self) -> list[Union[CollectionSweep, ReflectionSet]]:
        """getter for DropRegion.datasets list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Dataset"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for DropRegion.jobs list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Job"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def sample(self) -> Optional[CrystallographicSample]:
        """getter for DropRegion.sample"""
        return self.objects_by_id["PreparedSample"].get(self.sample_id)
    
    @sample.setter
    def sample(self, value: Optional[CrystallographicSample]):
        """setter for DropRegion.sample"""
        if value:
            if not isinstance(value, CrystallographicSample):
                raise ValueError(
                    "sample must be of type CrystallographicSample"
                )
            self.sample_id = value.uuid
        else:
            self.sample_id = None
