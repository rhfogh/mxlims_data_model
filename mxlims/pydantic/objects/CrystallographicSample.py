# generated by mxlims/impl/generate_code.py
#  filename CrystallographicSample.py

# NB Literal and UUID have to be imported to avoid pydantic errors
from __future__ import annotations
from typing import Any, Literal, Optional, Union, TYPE_CHECKING
from uuid import UUID
from mxlims.impl.MxlimsBase import MxlimsImplementation
from ..core.PreparedSample import PreparedSample
from ..data.PreparedSampleData import PreparedSampleData
from ..data.CrystallographicSampleData import CrystallographicSampleData
if TYPE_CHECKING:
    from .Crystal import Crystal
    from .DropRegion import DropRegion
    from .MxExperiment import MxExperiment
    from .MxProcessing import MxProcessing
    from .Pin import Pin
    from .PinPosition import PinPosition
    from .PlateWell import PlateWell
    from .WellDrop import WellDrop

class CrystallographicSample(CrystallographicSampleData, PreparedSampleData, PreparedSample, MxlimsImplementation):
    """MXLIMS pydantic model class for CrystallographicSample
    """
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        MxlimsImplementation.__init__(self)
    
    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for CrystallographicSample.jobs list"""
        return self._get_link_1n("Job", "sample_id")

    @jobs.setter
    def jobs(self, values: list[Union[MxExperiment, MxProcessing]]):
        """setter for CrystallographicSample.jobs list"""
        from .MxExperiment import MxExperiment
        from .MxProcessing import MxProcessing

        for obj in values:
            if not isinstance(obj, Union[MxExperiment, MxProcessing]):
                raise ValueError("%s is not of type Union[MxExperiment, MxProcessing]" % obj)
        self._set_link_1n_rev("Job", "sample_id", values)

    @property
    def logistical_samples(self) -> list[Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]]:
        """getter for CrystallographicSample.logistical_samples list"""
        return self._get_link_1n("LogisticalSample", "sample_id")

    @logistical_samples.setter
    def logistical_samples(self, values: list[Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]]):
        """setter for CrystallographicSample.logistical_samples list"""
        from .DropRegion import DropRegion
        from .PinPosition import PinPosition
        from .WellDrop import WellDrop
        from .Crystal import Crystal
        from .Pin import Pin
        from .PlateWell import PlateWell

        for obj in values:
            if not isinstance(obj, Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]):
                raise ValueError("%s is not of type Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]" % obj)
        self._set_link_1n_rev("LogisticalSample", "sample_id", values)
