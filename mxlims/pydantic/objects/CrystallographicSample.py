# generated by mxlims/scripts
#  filename CrystallographicSample.py

from __future__ import annotations
from typing import Optional, Union
from ..core.PreparedSample import PreparedSample
from ..data.PreparedSampleData import PreparedSampleData
from ..data.CrystallographicSampleData import CrystallographicSampleData
from .Crystal import Crystal
from .DropRegion import DropRegion
from .MxExperiment import MxExperiment
from .MxProcessing import MxProcessing
from .Pin import Pin
from .PinPosition import PinPosition
from .PlateWell import PlateWell
from .WellDrop import WellDrop

class CrystallographicSample(CrystallographicSampleData, PreparedSampleData, PreparedSample):
    """MXLIMS pydantic model class for CrystallographicSample
    """
    
    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for CrystallographicSample.jobs list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Job"]:
            if uid == obj.sample_id:
                result.append(obj)
        return result
    
    @property
    def logistical_samples(self) -> list[Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]]:
        """getter for CrystallographicSample.logistical_samples list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["LogisticalSample"]:
            if uid == obj.sample_id:
                result.append(obj)
        return result
    