# generated by mxlims/impl/generate_code.py
#  filename Medium.py

# NB UUID has to be imported to avoid pydantic errors ??
from __future__ import annotations
from pydantic import Field
from typing import Any, Literal, Optional, Union, TYPE_CHECKING
# from uuid import UUID, uuid1
from ..objects.Sample import Sample
from ..data.MediumData import MediumData
if TYPE_CHECKING:
    from .MacromoleculeSample import MacromoleculeSample

class Medium(MediumData, Sample):
    """MXLIMS pydantic model class for Medium
    """
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        
    mxlims_type: Literal["Medium"] = Field(
        "Medium",
        alias="mxlimsType",
        description="The type of MXLIMS object.",
        title="MxlimsType",
        frozen=True,
    )
    
    @property
    def medium_samples(self) -> list[MacromoleculeSample]:
        """getter for Medium.medium_samples list"""
        return self._get_link_1n("Sample", "medium_id")

    @medium_samples.setter
    def medium_samples(self, values: list[MacromoleculeSample]):
        """setter for Medium.medium_samples list"""
        from .MacromoleculeSample import MacromoleculeSample

        for obj in values:
            if not isinstance(obj, MacromoleculeSample):
                raise ValueError("%s is not of type MacromoleculeSample" % obj)
        self._set_link_1n_rev("Sample", "medium_id", values)
