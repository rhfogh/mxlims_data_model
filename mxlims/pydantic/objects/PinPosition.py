# generated by mxlims/scripts
#  filename PinPosition.py

from __future__ import annotations
from typing import Optional, Union
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.PinPositionData import PinPositionData
from .CollectionSweep import CollectionSweep
from .Crystal import Crystal
from .CrystallographicSample import CrystallographicSample
from .MxExperiment import MxExperiment
from .MxProcessing import MxProcessing
from .Pin import Pin
from .ReflectionSet import ReflectionSet

class PinPosition(PinPositionData, LogisticalSampleData, LogisticalSample):
    """MXLIMS pydantic model class for PinPosition
    """
    
    @property
    def container(self) -> Optional[Pin]:
        """getter for PinPosition.container"""
        return self.objects_by_id["LogisticalSample"].get(self.container_id)
    
    @container.setter
    def container(self, value: Optional[Pin]):
        """setter for PinPosition.container"""
        if value:
            if not isinstance(value, Pin):
                raise ValueError(
                    "container must be of type Pin"
                )
            self.container_id = value.uuid
        else:
            self.container_id = None

    @property
    def contents(self) -> list[Crystal]:
        """getter for PinPosition.contents list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["LogisticalSample"]:
            if uid == obj.container_id:
                result.append(obj)
        return result
    
    @property
    def datasets(self) -> list[Union[CollectionSweep, ReflectionSet]]:
        """getter for PinPosition.datasets list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Dataset"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for PinPosition.jobs list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Job"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def sample(self) -> Optional[CrystallographicSample]:
        """getter for PinPosition.sample"""
        return self.objects_by_id["PreparedSample"].get(self.sample_id)
    
    @sample.setter
    def sample(self, value: Optional[CrystallographicSample]):
        """setter for PinPosition.sample"""
        if value:
            if not isinstance(value, CrystallographicSample):
                raise ValueError(
                    "sample must be of type CrystallographicSample"
                )
            self.sample_id = value.uuid
        else:
            self.sample_id = None
