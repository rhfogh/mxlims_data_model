# generated by mxlims/impl/generate_code.py
#  filename Dewar.py

# NB Literal and UUID have to be imported to avoid pydantic errors
from __future__ import annotations
from typing import Optional, Union, Literal, TYPE_CHECKING
from uuid import UUID
from mxlims.pydantic.MxBaseModel import MxlimsImplementation
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.DewarData import DewarData
if TYPE_CHECKING:
    from .Puck import Puck
    from .Shipment import Shipment

class Dewar(DewarData, LogisticalSampleData, LogisticalSample, MxlimsImplementation):
    """MXLIMS pydantic model class for Dewar
    """
    
    @property
    def container(self) -> Optional[Shipment]:
        """getter for Dewar.container"""
        return self._get_link_n1("LogisticalSample", "container_id")

    @container.setter
    def container(self, value: Optional[Shipment]):
        """setter for Dewar.container"""
        from .Shipment import Shipment

        if value is None or isinstance(value, Shipment):
            self._set_link_n1("LogisticalSample", "container_id", value)
        else:
            raise ValueError("container must be of type Shipment or None")

    @property
    def contents(self) -> list[Puck]:
        """getter for Dewar.contents list"""
        return self._get_link_1n("LogisticalSample", "container_id")

    @contents.setter
    def contents(self, values: list[Puck]):
        """setter for Dewar.contents list"""
        from .Puck import Puck

        for obj in values:
            if not isinstance(obj, Puck):
                raise ValueError("%s is not of type Puck" % obj)
        self._set_link_1n_rev("LogisticalSample", "container_id", values)
