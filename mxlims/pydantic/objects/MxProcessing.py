# generated by datamodel-codegen:
#   filename:  objects/MxProcessing.json

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import Field

from ..data.MxProcessingData import MxProcessingData
from ..references.CollectionSweepRef import CollectionSweepRef
from ..references.CrystallographicSampleRef import CrystallographicSampleRef
from ..references.CrystalRef import CrystalRef
from ..references.DropRegionRef import DropRegionRef
from ..references.MxProcessingRef import MxProcessingRef
from ..references.PinPositionRef import PinPositionRef
from ..references.PinRef import PinRef
from ..references.PlateWellRef import PlateWellRef
from ..references.ReflectionSetRef import ReflectionSetRef
from ..references.WellDropRef import WellDropRef
from .Job import Job


class MxProcessing(MxProcessingData, Job):
    """
    Crystallography Processing calculation, with typed JSON containment lists
    """

    sample_ref: Optional[CrystallographicSampleRef] = Field(None, alias="sampleRef")
    started_from_ref: Optional[MxProcessingRef] = Field(None, alias="startedFromRef")
    logistical_sample_ref: Optional[
        Union[
            CrystalRef, PinRef, PinPositionRef, PlateWellRef, WellDropRef, DropRegionRef
        ]
    ] = Field(None, alias="logisticalSampleRef")
    reference_data_refs: Optional[List[ReflectionSetRef]] = Field(
        None, alias="referenceDataRefs"
    )
    template_data_refs: Optional[List[ReflectionSetRef]] = Field(
        None, alias="templateDataRefs"
    )
    input_data_refs: Optional[List[CollectionSweepRef]] = Field(
        None, alias="inputDataRefs"
    )
