# generated by mxlims/impl/generate_code.py
#  filename Plate.py

# NB Literal and UUID have to be imported to avoid pydantic errors
from __future__ import annotations
from pydantic import Field
from typing import Any, Literal, Optional, Union, TYPE_CHECKING
from uuid import UUID, uuid1
from mxlims.impl.MxlimsBase import MxlimsImplementation
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.PlateData import PlateData
if TYPE_CHECKING:
    from .PlateWell import PlateWell
    from .Shipment import Shipment

class Plate(PlateData, LogisticalSampleData, LogisticalSample, MxlimsImplementation):
    """MXLIMS pydantic model class for Plate
    """
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        MxlimsImplementation.__init__(self)
        
    mxlims_base_type: Literal["LogisticalSample"] = Field(
        "LogisticalSample",
        alias="mxlimsBaseType",
        description="The abstract (super)type of MXLIMS object.",
        title="MxlimsBaseType",
        exclude=True,
        frozen=True
    )
    mxlims_type: Literal["Plate"] = Field(
        "Plate",
        alias="mxlimsType",
        description="The type of MXLIMS object.",
        title="MxlimsType",
        frozen=True,
    )
    uuid: Optional[UUID] = Field(
        default_factory=uuid1,
        description="Permanent unique identifier string",
        title="Uuid",
        frozen=True
    )
    
    @property
    def container(self) -> Optional[Shipment]:
        """getter for Plate.container"""
        return self._get_link_n1("LogisticalSample", "container_id")

    @container.setter
    def container(self, value: Optional[Shipment]):
        """setter for Plate.container"""
        from .Shipment import Shipment

        if value is None or isinstance(value, Shipment):
            self._set_link_n1("LogisticalSample", "container_id", value)
        else:
            raise ValueError("container must be of type Shipment or None")

    @property
    def contents(self) -> list[PlateWell]:
        """getter for Plate.contents list"""
        return self._get_link_1n("LogisticalSample", "container_id")

    @contents.setter
    def contents(self, values: list[PlateWell]):
        """setter for Plate.contents list"""
        from .PlateWell import PlateWell

        for obj in values:
            if not isinstance(obj, PlateWell):
                raise ValueError("%s is not of type PlateWell" % obj)
        self._set_link_1n_rev("LogisticalSample", "container_id", values)
