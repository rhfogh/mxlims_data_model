# generated by mxlims/scripts
#  filename Plate.py

from __future__ import annotations
from typing import Optional, Union
from mxlims.pydantic.MxBaseModel import MxlimsImplementation
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.PlateData import PlateData
from .PlateWell import PlateWell
from .Shipment import Shipment

class Plate(PlateData, LogisticalSampleData, LogisticalSample, MxlimsImplementation):
    """MXLIMS pydantic model class for Plate
    """
    
    @property
    def container(self) -> Optional[Shipment]:
        """getter for Plate.container"""
        return self._get_link_n1("LogisticalSample", "container_id")

    @container.setter
    def container(self, value: Optional[Shipment]):
        """setter for Plate.container"""
        if value is None or isinstance(value, Shipment):
            self._set_link_n1("LogisticalSample", "container_id", value)
        else:
            raise ValueError("container must be of type Shipment or None")

    @property
    def contents(self) -> list[PlateWell]:
        """getter for Plate.contents list"""
        return self._get_link_1n("LogisticalSample", "container_id")

    @contents.setter
    def contents(self, values: list[PlateWell]):
        """setter for Plate.contents list"""
        for obj in values:
            if not isinstance(obj, PlateWell):
                raise ValueError("%s is not of type PlateWell" % obj)
        self._set_link_1n_rev("LogisticalSample", "container_id", values)
