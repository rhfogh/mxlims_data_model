# generated by mxlims/impl/generate_code.py
#  filename MacromoleculeSample.py

# NB UUID has to be imported to avoid pydantic errors ??
from __future__ import annotations
from pydantic import Field
from typing import Any, Literal, Optional, Union, TYPE_CHECKING
# from uuid import UUID, uuid1
from ..objects.Sample import Sample
from ..data.MacromoleculeSampleData import MacromoleculeSampleData
if TYPE_CHECKING:
    from .Crystal import Crystal
    from .DropRegion import DropRegion
    from .Macromolecule import Macromolecule
    from .Medium import Medium
    from .MxExperiment import MxExperiment
    from .MxProcessing import MxProcessing
    from .Pin import Pin
    from .PinPosition import PinPosition
    from .PlateWell import PlateWell
    from .WellDrop import WellDrop

class MacromoleculeSample(MacromoleculeSampleData, Sample):
    """MXLIMS pydantic model class for MacromoleculeSample
    """
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        Sample.__init__(self, **data)
        
    mxlims_type: Literal["MacromoleculeSample"] = Field(
        "MacromoleculeSample",
        alias="mxlimsType",
        description="The type of MXLIMS object.",
        title="MxlimsType",
        frozen=True,
    )
    
    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for MacromoleculeSample.jobs list"""
        return self._get_link_1n("Job", "sample_id")

    @jobs.setter
    def jobs(self, values: list[Union[MxExperiment, MxProcessing]]):
        """setter for MacromoleculeSample.jobs list"""
        from .MxExperiment import MxExperiment
        from .MxProcessing import MxProcessing

        for obj in values:
            if not isinstance(obj, Union[MxExperiment, MxProcessing]):
                raise ValueError("%s is not of type Union[MxExperiment, MxProcessing]" % obj)
        self._set_link_1n_rev("Job", "sample_id", values)

    @property
    def logistical_samples(self) -> list[Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]]:
        """getter for MacromoleculeSample.logistical_samples list"""
        return self._get_link_1n("LogisticalSample", "sample_id")

    @logistical_samples.setter
    def logistical_samples(self, values: list[Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]]):
        """setter for MacromoleculeSample.logistical_samples list"""
        from .PlateWell import PlateWell
        from .Pin import Pin
        from .Crystal import Crystal
        from .DropRegion import DropRegion
        from .PinPosition import PinPosition
        from .WellDrop import WellDrop

        for obj in values:
            if not isinstance(obj, Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]):
                raise ValueError("%s is not of type Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]" % obj)
        self._set_link_1n_rev("LogisticalSample", "sample_id", values)

    @property
    def main_component(self) -> Optional[Macromolecule]:
        """getter for MacromoleculeSample.main_component"""
        return self._get_link_n1("Sample", "main_component_id")

    @main_component.setter
    def main_component(self, value: Optional[Macromolecule]):
        """setter for MacromoleculeSample.main_component"""
        from .Macromolecule import Macromolecule

        if value is None or isinstance(value, Macromolecule):
            self._set_link_n1("Sample", "main_component_id", value)
        else:
            raise ValueError("main_component must be of type Macromolecule or None")

    @property
    def medium(self) -> Optional[Medium]:
        """getter for MacromoleculeSample.medium"""
        return self._get_link_n1("Sample", "medium_id")

    @medium.setter
    def medium(self, value: Optional[Medium]):
        """setter for MacromoleculeSample.medium"""
        from .Medium import Medium

        if value is None or isinstance(value, Medium):
            self._set_link_n1("Sample", "medium_id", value)
        else:
            raise ValueError("medium must be of type Medium or None")
