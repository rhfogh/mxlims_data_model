# generated by mxlims/impl/generate_code.py
#  filename Job.py

from __future__ import annotations
from pydantic import Field
from typing import Any, Literal, Optional, Union, TYPE_CHECKING
from uuid import UUID, uuid1
from mxlims.impl.MxlimsBase import MxlimsImplementation
from ..data.JobData import JobData
if TYPE_CHECKING:
    from .Dataset import Dataset
    from .LogisticalSample import LogisticalSample
    from .Sample import Sample

class Job(JobData, MxlimsImplementation):
    """MXLIMS pydantic model class for Job
    """
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        MxlimsImplementation.__init__(self)
        
    mxlims_base_type: Literal["Job"] = Field(
        "Job",
        alias="mxlimsBaseType",
        description="The abstract (super)type of MXLIMS object.",
        title="MxlimsBaseType",
        exclude=True,
        frozen=True
    )
    mxlims_type: str = Field(
        "Job",
        alias="mxlimsType",
        description="The type of MXLIMS object.",
        title="MxlimsType",
        frozen=True,
    )
    uuid: Optional[UUID] = Field(
        default_factory=uuid1,
        description="Permanent unique identifier string",
        title="Uuid",
        frozen=True
    )
    
    @property
    def input_data(self) -> list[Dataset]:
        """Abstract superclass - dummy getter for Job.input_data list"""
        return []

    @property
    def logistical_sample(self) -> Optional[LogisticalSample]:
        """Abstract superclass - dummy getter for Job.logistical_sample"""
        return None

    @property
    def reference_data(self) -> list[Dataset]:
        """Abstract superclass - dummy getter for Job.reference_data list"""
        return []

    @property
    def results(self) -> list[Dataset]:
        """Abstract superclass - dummy getter for Job.results list"""
        return []

    @property
    def sample(self) -> Optional[Sample]:
        """Abstract superclass - dummy getter for Job.sample"""
        return None

    @property
    def started_from(self) -> Optional[Job]:
        """Abstract superclass - dummy getter for Job.started_from"""
        return None

    @property
    def subjobs(self) -> list[Job]:
        """Abstract superclass - dummy getter for Job.subjobs list"""
        return []

    @property
    def template_data(self) -> list[Dataset]:
        """Abstract superclass - dummy getter for Job.template_data list"""
        return []
