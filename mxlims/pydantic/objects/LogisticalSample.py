# generated by mxlims/impl/generate_code.py
#  filename LogisticalSample.py

from __future__ import annotations
from pydantic import Field
from typing import Any, Literal, Optional, Union, TYPE_CHECKING
from uuid import UUID, uuid1
from mxlims.impl.MxlimsBase import MxlimsImplementation
from ..data.LogisticalSampleData import LogisticalSampleData
if TYPE_CHECKING:
    from .Dataset import Dataset
    from .Job import Job
    from .Sample import Sample

class LogisticalSample(LogisticalSampleData, MxlimsImplementation):
    """MXLIMS pydantic model class for LogisticalSample
    """
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        MxlimsImplementation.__init__(self)
        
    mxlims_base_type: Literal["LogisticalSample"] = Field(
        "LogisticalSample",
        alias="mxlimsBaseType",
        description="The abstract (super)type of MXLIMS object.",
        title="MxlimsBaseType",
        exclude=True,
        frozen=True
    )
    mxlims_type: str = Field(
        "LogisticalSample",
        alias="mxlimsType",
        description="The type of MXLIMS object.",
        title="MxlimsType",
        frozen=True,
    )
    uuid: Optional[UUID] = Field(
        default_factory=uuid1,
        description="Permanent unique identifier string",
        title="Uuid",
        frozen=True
    )
    
    @property
    def container(self) -> Optional[LogisticalSample]:
        """Abstract superclass - dummy getter for LogisticalSample.container"""
        return None

    @property
    def contents(self) -> list[LogisticalSample]:
        """Abstract superclass - dummy getter for LogisticalSample.contents list"""
        return []

    @property
    def datasets(self) -> list[Dataset]:
        """Abstract superclass - dummy getter for LogisticalSample.datasets list"""
        return []

    @property
    def jobs(self) -> list[Job]:
        """Abstract superclass - dummy getter for LogisticalSample.jobs list"""
        return []

    @property
    def sample(self) -> Optional[Sample]:
        """Abstract superclass - dummy getter for LogisticalSample.sample"""
        return None
