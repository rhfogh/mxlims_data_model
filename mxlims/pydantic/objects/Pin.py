# generated by mxlims/scripts
#  filename Pin.py

from __future__ import annotations
from typing import Optional, Union
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.PinData import PinData
from .CollectionSweep import CollectionSweep
from .CrystallographicSample import CrystallographicSample
from .MxExperiment import MxExperiment
from .MxProcessing import MxProcessing
from .PinPosition import PinPosition
from .Puck import Puck
from .ReflectionSet import ReflectionSet

class Pin(PinData, LogisticalSampleData, LogisticalSample):
    """MXLIMS pydantic model class for Pin
    """
    
    @property
    def container(self) -> Optional[Puck]:
        """getter for Pin.container"""
        return self.objects_by_id["LogisticalSample"].get(self.container_id)
    
    @container.setter
    def container(self, value: Optional[Puck]):
        """setter for Pin.container"""
        if value:
            if not isinstance(value, Puck):
                raise ValueError(
                    "container must be of type Puck"
                )
            self.container_id = value.uuid
        else:
            self.container_id = None

    @property
    def contents(self) -> list[PinPosition]:
        """getter for Pin.contents list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["LogisticalSample"]:
            if uid == obj.container_id:
                result.append(obj)
        return result
    
    @property
    def datasets(self) -> list[Union[CollectionSweep, ReflectionSet]]:
        """getter for Pin.datasets list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Dataset"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for Pin.jobs list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Job"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def sample(self) -> Optional[CrystallographicSample]:
        """getter for Pin.sample"""
        return self.objects_by_id["PreparedSample"].get(self.sample_id)
    
    @sample.setter
    def sample(self, value: Optional[CrystallographicSample]):
        """setter for Pin.sample"""
        if value:
            if not isinstance(value, CrystallographicSample):
                raise ValueError(
                    "sample must be of type CrystallographicSample"
                )
            self.sample_id = value.uuid
        else:
            self.sample_id = None
