# generated by mxlims/scripts
#  filename Pin.py

from __future__ import annotations
from typing import Optional, Union
from mxlims.pydantic.MxBaseModel import MxlimsImplementation
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.PinData import PinData
from .CollectionSweep import CollectionSweep
from .CrystallographicSample import CrystallographicSample
from .MxExperiment import MxExperiment
from .MxProcessing import MxProcessing
from .PinPosition import PinPosition
from .Puck import Puck
from .ReflectionSet import ReflectionSet

class Pin(PinData, LogisticalSampleData, LogisticalSample, MxlimsImplementation):
    """MXLIMS pydantic model class for Pin
    """
    
    @property
    def container(self) -> Optional[Puck]:
        """getter for Pin.container"""
        return self._get_link_n1("LogisticalSample", "container_id")

    @container.setter
    def container(self, value: Optional[Puck]):
        """setter for Pin.container"""
        if value is None or isinstance(value, Puck):
            self._set_link_n1("LogisticalSample", "container_id", value)
        else:
            raise ValueError("container must be of type Puck or None")

    @property
    def contents(self) -> list[PinPosition]:
        """getter for Pin.contents list"""
        return self._get_link_1n("LogisticalSample", "container_id")

    @contents.setter
    def contents(self, values: list[PinPosition]):
        """setter for Pin.contents list"""
        for obj in values:
            if not isinstance(obj, PinPosition):
                raise ValueError("%s is not of type PinPosition" % obj)
        self._set_link_1n_rev("LogisticalSample", "container_id", values)

    @property
    def datasets(self) -> list[Union[CollectionSweep, ReflectionSet]]:
        """getter for Pin.datasets list"""
        return self._get_link_1n("Dataset", "logistical_sample_id")

    @datasets.setter
    def datasets(self, values: list[Union[CollectionSweep, ReflectionSet]]):
        """setter for Pin.datasets list"""
        for obj in values:
            if not isinstance(obj, Union[CollectionSweep, ReflectionSet]):
                raise ValueError("%s is not of type Union[CollectionSweep, ReflectionSet]" % obj)
        self._set_link_1n_rev("Dataset", "logistical_sample_id", values)

    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for Pin.jobs list"""
        return self._get_link_1n("Job", "logistical_sample_id")

    @jobs.setter
    def jobs(self, values: list[Union[MxExperiment, MxProcessing]]):
        """setter for Pin.jobs list"""
        for obj in values:
            if not isinstance(obj, Union[MxExperiment, MxProcessing]):
                raise ValueError("%s is not of type Union[MxExperiment, MxProcessing]" % obj)
        self._set_link_1n_rev("Job", "logistical_sample_id", values)

    @property
    def sample(self) -> Optional[CrystallographicSample]:
        """getter for Pin.sample"""
        return self._get_link_n1("PreparedSample", "sample_id")

    @sample.setter
    def sample(self, value: Optional[CrystallographicSample]):
        """setter for Pin.sample"""
        if value is None or isinstance(value, CrystallographicSample):
            self._set_link_n1("PreparedSample", "sample_id", value)
        else:
            raise ValueError("sample must be of type CrystallographicSample or None")
