# generated by mxlims/impl/generate_code.py
#  filename Crystal.py

# NB Literal and UUID have to be imported to avoid pydantic errors
from __future__ import annotations
from pydantic import Field
from typing import Any, Literal, Optional, Union, TYPE_CHECKING
from uuid import UUID, uuid1
from mxlims.impl.MxlimsBase import MxlimsImplementation
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.CrystalData import CrystalData
if TYPE_CHECKING:
    from .CollectionSweep import CollectionSweep
    from .DropRegion import DropRegion
    from .MacromoleculeSample import MacromoleculeSample
    from .MxExperiment import MxExperiment
    from .MxProcessing import MxProcessing
    from .Pin import Pin
    from .PinPosition import PinPosition
    from .ReflectionSet import ReflectionSet

class Crystal(CrystalData, LogisticalSampleData, LogisticalSample, MxlimsImplementation):
    """MXLIMS pydantic model class for Crystal
    """
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        MxlimsImplementation.__init__(self)
        
    mxlims_base_type: Literal["LogisticalSample"] = Field(
        "LogisticalSample",
        alias="mxlimsBaseType",
        description="The abstract (super)type of MXLIMS object.",
        title="MxlimsBaseType",
        exclude=True,
        frozen=True
    )
    mxlims_type: Literal["Crystal"] = Field(
        "Crystal",
        alias="mxlimsType",
        description="The type of MXLIMS object.",
        title="MxlimsType",
        frozen=True,
    )
    uuid: Optional[UUID] = Field(
        default_factory=uuid1,
        description="Permanent unique identifier string",
        title="Uuid",
        frozen=True
    )
    
    @property
    def container(self) -> Optional[Union[DropRegion, Pin, PinPosition]]:
        """getter for Crystal.container"""
        return self._get_link_n1("LogisticalSample", "container_id")

    @container.setter
    def container(self, value: Optional[Union[DropRegion, Pin, PinPosition]]):
        """setter for Crystal.container"""
        from .Pin import Pin
        from .PinPosition import PinPosition
        from .DropRegion import DropRegion

        if value is None or isinstance(value, Union[DropRegion, Pin, PinPosition]):
            self._set_link_n1("LogisticalSample", "container_id", value)
        else:
            raise ValueError("container must be of type Union[DropRegion, Pin, PinPosition] or None")

    @property
    def datasets(self) -> list[Union[CollectionSweep, ReflectionSet]]:
        """getter for Crystal.datasets list"""
        return self._get_link_1n("Dataset", "logistical_sample_id")

    @datasets.setter
    def datasets(self, values: list[Union[CollectionSweep, ReflectionSet]]):
        """setter for Crystal.datasets list"""
        from .CollectionSweep import CollectionSweep
        from .ReflectionSet import ReflectionSet

        for obj in values:
            if not isinstance(obj, Union[CollectionSweep, ReflectionSet]):
                raise ValueError("%s is not of type Union[CollectionSweep, ReflectionSet]" % obj)
        self._set_link_1n_rev("Dataset", "logistical_sample_id", values)

    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for Crystal.jobs list"""
        return self._get_link_1n("Job", "logistical_sample_id")

    @jobs.setter
    def jobs(self, values: list[Union[MxExperiment, MxProcessing]]):
        """setter for Crystal.jobs list"""
        from .MxProcessing import MxProcessing
        from .MxExperiment import MxExperiment

        for obj in values:
            if not isinstance(obj, Union[MxExperiment, MxProcessing]):
                raise ValueError("%s is not of type Union[MxExperiment, MxProcessing]" % obj)
        self._set_link_1n_rev("Job", "logistical_sample_id", values)

    @property
    def sample(self) -> Optional[MacromoleculeSample]:
        """getter for Crystal.sample"""
        return self._get_link_n1("Sample", "sample_id")

    @sample.setter
    def sample(self, value: Optional[MacromoleculeSample]):
        """setter for Crystal.sample"""
        from .MacromoleculeSample import MacromoleculeSample

        if value is None or isinstance(value, MacromoleculeSample):
            self._set_link_n1("Sample", "sample_id", value)
        else:
            raise ValueError("sample must be of type MacromoleculeSample or None")
