# generated by mxlims/impl/generate_code.py
#  filename CollectionSweep.py

# NB UUID has to be imported to avoid pydantic errors ??
from __future__ import annotations
from pydantic import Field
from typing import Any, Literal, Optional, Union, TYPE_CHECKING
# from uuid import UUID, uuid1
from ..objects.Dataset import Dataset
from ..data.CollectionSweepData import CollectionSweepData
if TYPE_CHECKING:
    from .Crystal import Crystal
    from .DropRegion import DropRegion
    from .MxExperiment import MxExperiment
    from .MxProcessing import MxProcessing
    from .Pin import Pin
    from .PinPosition import PinPosition
    from .PlateWell import PlateWell
    from .WellDrop import WellDrop

class CollectionSweep(CollectionSweepData, Dataset):
    """MXLIMS pydantic model class for CollectionSweep
    """
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        Dataset.__init__(self, **data)
        
    mxlims_type: Literal["CollectionSweep"] = Field(
        "CollectionSweep",
        alias="mxlimsType",
        description="The type of MXLIMS object.",
        title="MxlimsType",
        frozen=True,
    )
    
    @property
    def derived_datasets(self) -> list[CollectionSweep]:
        """getter for CollectionSweep.derived_datasets list"""
        return self._get_link_1n("Dataset", "derived_from_id")

    @property
    def derived_from(self) -> Optional[CollectionSweep]:
        """getter for CollectionSweep.derived_from"""
        return self._get_link_n1("Dataset", "derived_from_id")

    @property
    def input_for(self) -> list[MxProcessing]:
        """getter for CollectionSweep.input_for list"""
        return self._get_link_nn_rev("Job", "input_data_ids")

    @input_for.setter
    def input_for(self, values: list[MxProcessing]):
        """setter for CollectionSweep.input_for list"""
        from .MxProcessing import MxProcessing

        for obj in values:
            if not isinstance(obj, MxProcessing):
                raise ValueError("%s is not of type MxProcessing" % obj)
        self._set_link_nn_rev("Job", "input_data_ids", values)

    def append_input_for(self, value: MxProcessing):
        """append to CollectionSweep.input_for list"""
        value.append_input_data(self)

    def remove_input_for(self, value: MxProcessing):
        """remove from CollectionSweep.input_for list"""
        value.remove_input_data(self)
    
    @property
    def logistical_sample(self) -> Optional[Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]]:
        """getter for CollectionSweep.logistical_sample"""
        return self._get_link_n1("LogisticalSample", "logistical_sample_id")

    @logistical_sample.setter
    def logistical_sample(self, value: Optional[Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]]):
        """setter for CollectionSweep.logistical_sample"""
        from .Crystal import Crystal
        from .Pin import Pin
        from .PinPosition import PinPosition
        from .PlateWell import PlateWell
        from .WellDrop import WellDrop
        from .DropRegion import DropRegion

        if value is None or isinstance(value, Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]):
            self._set_link_n1("LogisticalSample", "logistical_sample_id", value)
        else:
            raise ValueError("logistical_sample must be of type Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop] or None")

    @property
    def source(self) -> Optional[MxExperiment]:
        """getter for CollectionSweep.source"""
        return self._get_link_n1("Job", "source_id")

    @property
    def template_for(self) -> list[MxExperiment]:
        """getter for CollectionSweep.template_for list"""
        return self._get_link_nn_rev("Job", "template_data_ids")

    @template_for.setter
    def template_for(self, values: list[MxExperiment]):
        """setter for CollectionSweep.template_for list"""
        from .MxExperiment import MxExperiment

        for obj in values:
            if not isinstance(obj, MxExperiment):
                raise ValueError("%s is not of type MxExperiment" % obj)
        self._set_link_nn_rev("Job", "template_data_ids", values)

    def append_template_for(self, value: MxExperiment):
        """append to CollectionSweep.template_for list"""
        value.append_template_data(self)

    def remove_template_for(self, value: MxExperiment):
        """remove from CollectionSweep.template_for list"""
        value.remove_template_data(self)
    