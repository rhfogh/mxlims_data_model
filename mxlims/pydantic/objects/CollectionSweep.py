# generated by mxlims/scripts
#  filename CollectionSweep.py

from __future__ import annotations
from typing import Optional, Union
from ..core.Dataset import Dataset
from ..data.DatasetData import DatasetData
from ..data.CollectionSweepData import CollectionSweepData
from .Crystal import Crystal
from .DropRegion import DropRegion
from .MxExperiment import MxExperiment
from .MxProcessing import MxProcessing
from .Pin import Pin
from .PinPosition import PinPosition
from .PlateWell import PlateWell
from .WellDrop import WellDrop

class CollectionSweep(CollectionSweepData, DatasetData, Dataset):
    """MXLIMS pydantic model class for CollectionSweep
    """
    
    @property
    def derived_datasets(self) -> list[CollectionSweep]:
        """getter for CollectionSweep.derived_datasets list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Dataset"]:
            if uid == obj.derived_from_id:
                result.append(obj)
        return result
    
    @property
    def derived_from(self) -> Optional[CollectionSweep]:
        """getter for CollectionSweep.derived_from"""
        return self.objects_by_id["Dataset"].get(self.derived_from_id)
    
    @property
    def input_for(self) -> list[MxProcessing]:
        """getter for CollectionSweep.input_for list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Job"]:
            if uid in obj.input_data_ids:
                result.append(obj)
        return result
    
    @property
    def logistical_sample(self) -> Optional[Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]]:
        """getter for CollectionSweep.logistical_sample"""
        return self.objects_by_id["LogisticalSample"].get(self.logistical_sample_id)
    
    @logistical_sample.setter
    def logistical_sample(self, value: Optional[Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]]):
        """setter for CollectionSweep.logistical_sample"""
        if value:
            if not isinstance(value, Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]):
                raise ValueError(
                    "logistical_sample must be of type Union[Crystal, DropRegion, Pin, PinPosition, PlateWell, WellDrop]"
                )
            self.logistical_sample_id = value.uuid
        else:
            self.logistical_sample_id = None

    @property
    def source(self) -> Optional[MxExperiment]:
        """getter for CollectionSweep.source"""
        return self.objects_by_id["Job"].get(self.source_id)
    
    @property
    def template_for(self) -> list[MxExperiment]:
        """getter for CollectionSweep.template_for list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Job"]:
            if uid in obj.template_data_ids:
                result.append(obj)
        return result
    