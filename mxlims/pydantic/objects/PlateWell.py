# generated by mxlims/scripts
#  filename PlateWell.py

from __future__ import annotations
from typing import Optional, Union
from ..core.LogisticalSample import LogisticalSample
from ..data.LogisticalSampleData import LogisticalSampleData
from ..data.PlateWellData import PlateWellData
from .CollectionSweep import CollectionSweep
from .CrystallographicSample import CrystallographicSample
from .MxExperiment import MxExperiment
from .MxProcessing import MxProcessing
from .Plate import Plate
from .ReflectionSet import ReflectionSet
from .WellDrop import WellDrop

class PlateWell(PlateWellData, LogisticalSampleData, LogisticalSample):
    """MXLIMS pydantic model class for PlateWell
    """
    
    @property
    def container(self) -> Optional[Plate]:
        """getter for PlateWell.container"""
        return self.objects_by_id["LogisticalSample"].get(self.container_id)
    
    @container.setter
    def container(self, value: Optional[Plate]):
        """setter for PlateWell.container"""
        if value:
            if not isinstance(value, Plate):
                raise ValueError(
                    "container must be of type Plate"
                )
            self.container_id = value.uuid
        else:
            self.container_id = None

    @property
    def contents(self) -> list[WellDrop]:
        """getter for PlateWell.contents list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["LogisticalSample"]:
            if uid == obj.container_id:
                result.append(obj)
        return result
    
    @property
    def datasets(self) -> list[Union[CollectionSweep, ReflectionSet]]:
        """getter for PlateWell.datasets list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Dataset"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def jobs(self) -> list[Union[MxExperiment, MxProcessing]]:
        """getter for PlateWell.jobs list"""
        uid = self.uuid
        result = []
        for obj in self.objects_by_id["Job"]:
            if uid == obj.logistical_sample_id:
                result.append(obj)
        return result
    
    @property
    def sample(self) -> Optional[CrystallographicSample]:
        """getter for PlateWell.sample"""
        return self.objects_by_id["PreparedSample"].get(self.sample_id)
    
    @sample.setter
    def sample(self, value: Optional[CrystallographicSample]):
        """setter for PlateWell.sample"""
        if value:
            if not isinstance(value, CrystallographicSample):
                raise ValueError(
                    "sample must be of type CrystallographicSample"
                )
            self.sample_id = value.uuid
        else:
            self.sample_id = None
