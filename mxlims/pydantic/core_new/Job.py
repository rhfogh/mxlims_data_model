# generated by datamodel-codegen:
#   filename:  core/Dataset.json

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import Field
from uuid import UUID

from ..data.JobData import JobData


class Job(JobData):
    """
    Base class for MXLIMS Jobs
    """

    sample_id: Optional[UUID] = Field(
        None,
        alias="sampleId",
        description="Uuid of the PreparedSample associated with this Job",
        title="SampleId",
    )
    started_from_id: Optional[UUID] = Field(
        None,
        alias="startedFromId",
        description="Uuid of the Job from which this Job was started",
        title="DerivedFromId",
    )
    logistical_sample_id: Optional[UUID] = Field(
        None,
        alias="logisticalSampleId",
        description="Uuid of the LogisticalSample associated with this Job",
        title="LogisticalSampleId",
    )
    input_data_ids: List[UUID] = Field(
        [],
        alias="inputDataIds",
        description="List of Uuid for the input Datasets used for this Job",
        title="InputDataIds",
    )
    reference_data_ids: List[UUID] = Field(
        [],
        alias="referenceDataIds",
        description="List of Uuid for the reference Datasets used for this Job",
        title="ReferenceDataIds",
    )
    template_data_ids: List[UUID] = Field(
        [],
        alias="templateDataIds",
        description="List of Uuid for the template Datasets used for this Job",
        title="TemplateDataIds",
    )

    def __init__(self, /, **data: Any) -> None:
        super().__init__(**data)
        obj_by_id = self.jobs_by_id
        if self.uuid in obj_by_id:
            raise ValueError(f"Job with uuid '{self.uuid}' already exists")
        else:
            obj_by_id[self.uuid] = self
