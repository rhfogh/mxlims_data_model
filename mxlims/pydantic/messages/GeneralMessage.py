# generated by datamodel-codegen:
#   filename:  messages/GeneralMessage.json

from __future__ import annotations

from typing import List, Optional, Union

from mxlims.pydantic.MxBaseModel import BaseModel

from pydantic import Field

from ..data.CollectionSweep import CollectionSweep
from ..data.Crystal import Crystal
from ..data.CrystallographicSample import CrystallographicSample
from ..data.Dewar import Dewar
from ..data.DropRegion import DropRegion
from ..data.MxExperiment import MxExperiment
from ..data.MxProcessing import MxProcessing
from ..data.Pin import Pin
from ..data.PinPosition import PinPosition
from ..data.Plate import Plate
from ..data.PlateWell import PlateWell
from ..data.Puck import Puck
from ..data.ReflectionSet import ReflectionSet
from ..data.Shipment import Shipment
from ..data.WellDrop import WellDrop


class GeneralMessage(BaseModel):
    """
    Message containing all possible objects, without JSON content links
    """

    jobs: Optional[List[Union[MxProcessing, MxExperiment]]] = Field(
        None, description="List of directly contained Jobs.", title="Jobs"
    )
    datasets: Optional[List[Union[CollectionSweep, ReflectionSet]]] = Field(
        None, description="List of directly contained Datasets.", title="Datasets"
    )
    prepared_samples: Optional[List[CrystallographicSample]] = Field(
        None,
        alias="preparedSamples",
        description="List of directly contained Prepared Samples.",
        title="Prepared Samples",
    )
    logistical_samples: Optional[
        List[
            Union[
                Shipment,
                Dewar,
                Plate,
                Puck,
                PlateWell,
                Pin,
                WellDrop,
                PinPosition,
                DropRegion,
                Crystal,
            ]
        ]
    ] = Field(
        None,
        alias="logisticalSamples",
        description="List of directly contained Logistical Samples.",
        title="Logistical Samples",
    )
