# generated by datamodel-codegen:
#   filename:  datatypes/PlateType.json

from __future__ import annotations

from typing import Optional

from mxlims.pydantic.MxBaseModel import BaseModel

from pydantic import ConfigDict, Field, conint


class PlateType(BaseModel):
    """
    A type of crystallization plate.
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the plate type.",
        examples=["Greiner 1-drop square"],
    )
    number_rows: conint(ge=1) = Field(
        ...,
        alias="numberRows",
        description="The number of rows in the plate. For a typical 96-well plate, this will be 8.",
    )
    number_columns: conint(ge=1) = Field(
        ...,
        alias="numberColumns",
        description="The number of columns in the plate. For a typical 96-well plate, this will be 12.",
    )
    number_sub_positions: conint(ge=1) = Field(
        ...,
        alias="numberSubPositions",
        description="The number of sub-wells in the plate. For in-situ plates with no dividers, this should be the actual number of drops dispensed.",
    )
    drop_mapping: str = Field(
        ...,
        alias="dropMapping",
        description="<p>The sender's numbering of the sub-wells. This can be used by the receiver to map the sender's well numbering onto their own.<p><p>It is an error if the sender and receiver disagree on the basic geometry (e.g., three drops across the top with a reservoir underneath). However, they can disagree on the drop order; this property is intended to help overcome such disagreements.</p>",
        examples=["123,RRR", "23,1R"],
    )
