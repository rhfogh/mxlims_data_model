# Map of MXLIMS concatenated field strings to type
# Generated by mxlims.impl.generate_fields
#
# Concatenated field strings, and hence this mapping, are used in setting up simple
# mappings used in conversion to other formats.
#
# NOTE Not all parts of the MXLIMS model can be reached with a concatenated field string
# Types that are lists or unions of Datatypes contain further attributes but
# cannot be mapped in this way. Examples are
# MacromoleculeSample.components (type: List[SampleComponent])
# or DropRegion.region (type: Union[ImageRegion,PlateRegion])
# Conversion access to these fields require more complex code than the simple
# mapping table look-up
#
# Concatenated field strings can be used to address dictionaries. E.g.
# Macromolecule.identifiers.SwissProt maps to Macromolecule.identifiers["SwissProt"]

from typing import Any, Dict, List

from mxlims.pydantic.datatypes.ImageRegion import ImageRegion
from mxlims.pydantic.datatypes.Person import Person
from mxlims.pydantic.datatypes.PlateRegion import PlateRegion
from mxlims.pydantic.datatypes.PlateType import PlateType
from mxlims.pydantic.datatypes.ReflectionStatistics import ReflectionStatistics
from mxlims.pydantic.datatypes.ResolutionCutoffs import ResolutionCutoffs
from mxlims.pydantic.datatypes.SampleComponent import SampleComponent
from mxlims.pydantic.datatypes.Scan import Scan
from mxlims.pydantic.datatypes.Tensor import Tensor
from mxlims.pydantic.datatypes.TrackingDevice import TrackingDevice
from mxlims.pydantic.datatypes.UnitCell import UnitCell

typemap = {
    "CollectionSweep.annotation": str,
    "CollectionSweep.axisPositionsEnd": Dict[str, float],
    "CollectionSweep.axisPositionsStart": Dict[str, float],
    "CollectionSweep.beamPosition": List[float],
    "CollectionSweep.beamShape": str,
    "CollectionSweep.beamSize": List[float],
    "CollectionSweep.detectorBinningMode": str,
    "CollectionSweep.detectorRoiMode": str,
    "CollectionSweep.detectorType": str,
    "CollectionSweep.energy": float,
    "CollectionSweep.exposureTime": float,
    "CollectionSweep.fileType": str,
    "CollectionSweep.filenameTemplate": str,
    "CollectionSweep.imageWidth": float,
    "CollectionSweep.meshRange": List[float],
    "CollectionSweep.numberImages": int,
    "CollectionSweep.numberImagesPerTrigger": int,
    "CollectionSweep.numberLines": int,
    "CollectionSweep.numberTriggers": int,
    "CollectionSweep.overlap": float,
    "CollectionSweep.path": str,
    "CollectionSweep.prefix": str,
    "CollectionSweep.resolution": float,
    "CollectionSweep.role": str,
    "CollectionSweep.scanAxis": str,
    "CollectionSweep.scans": List[Scan],
    "CollectionSweep.sweepType": str,
    "CollectionSweep.transmission": float,
    "Crystal.annotation": str,
    "Crystal.name": str,
    "Dewar.annotation": str,
    "Dewar.barcode": str,
    "Dewar.name": str,
    "Dewar.trackingDevice": TrackingDevice,
    "Dewar.trackingDevice.apiTrackingUrl": str,
    "Dewar.trackingDevice.deviceType": str,
    "Dewar.trackingDevice.humanTrackingUrl": str,
    "Dewar.trackingDevice.identifier": str,
    "DropRegion.annotation": str,
    "DropRegion.name": str,
    "DropRegion.region": ImageRegion|PlateRegion,
    "Macromolecule.acronym": str,
    "Macromolecule.annotation": str,
    "Macromolecule.campaignName": str,
    "Macromolecule.components": List[SampleComponent],
    "Macromolecule.identifiers": Dict[str, str],
    "Macromolecule.name": str,
    "MacromoleculeSample.acronym": str,
    "MacromoleculeSample.annotation": str,
    "MacromoleculeSample.campaignName": str,
    "MacromoleculeSample.components": List[SampleComponent],
    "MacromoleculeSample.identifiers": Dict[str, str],
    "MacromoleculeSample.name": str,
    "Medium.acronym": str,
    "Medium.annotation": str,
    "Medium.campaignName": str,
    "Medium.components": List[SampleComponent],
    "Medium.identifiers": Dict[str, str],
    "Medium.name": str,
    "MultiPin.annotation": str,
    "MultiPin.barcode": str,
    "MultiPin.name": str,
    "MultiPin.numberPositions": int,
    "MultiPin.positionInPuck": int,
    "MxExperiment.aimedTotalRange": float,
    "MxExperiment.annotation": str,
    "MxExperiment.doseBudget": float,
    "MxExperiment.endTime": str,
    "MxExperiment.energy": float,
    "MxExperiment.expectedResolution": float,
    "MxExperiment.expectedSpaceGroupName": str,
    "MxExperiment.expectedUnitCell": UnitCell,
    "MxExperiment.expectedUnitCell.a": float,
    "MxExperiment.expectedUnitCell.alpha": float,
    "MxExperiment.expectedUnitCell.b": float,
    "MxExperiment.expectedUnitCell.beta": float,
    "MxExperiment.expectedUnitCell.c": float,
    "MxExperiment.expectedUnitCell.gamma": float,
    "MxExperiment.experimentLocation": str,
    "MxExperiment.experimentStrategy": str,
    "MxExperiment.jobStatus": str,
    "MxExperiment.measuredFlux": float,
    "MxExperiment.priority": int,
    "MxExperiment.radiationDose": float,
    "MxExperiment.radiationSensitivity": float,
    "MxExperiment.requiredResolution": float,
    "MxExperiment.selectedSpaceGroupName": str,
    "MxExperiment.selectedUnitCell": UnitCell,
    "MxExperiment.selectedUnitCell.a": float,
    "MxExperiment.selectedUnitCell.alpha": float,
    "MxExperiment.selectedUnitCell.b": float,
    "MxExperiment.selectedUnitCell.beta": float,
    "MxExperiment.selectedUnitCell.c": float,
    "MxExperiment.selectedUnitCell.gamma": float,
    "MxExperiment.snapshotCount": int,
    "MxExperiment.startTime": str,
    "MxExperiment.targetCompleteness": float,
    "MxExperiment.targetMultiplicity": float,
    "MxExperiment.wedgeWidth": float,
    "MxProcessing.annotation": str,
    "MxProcessing.endTime": str,
    "MxProcessing.jobStatus": str,
    "MxProcessing.programName": str,
    "MxProcessing.programVersion": str,
    "MxProcessing.spaceGroupName": str,
    "MxProcessing.startTime": str,
    "MxProcessing.unitCell": UnitCell,
    "MxProcessing.unitCell.a": float,
    "MxProcessing.unitCell.alpha": float,
    "MxProcessing.unitCell.b": float,
    "MxProcessing.unitCell.beta": float,
    "MxProcessing.unitCell.c": float,
    "MxProcessing.unitCell.gamma": float,
    "Pin.annotation": str,
    "Pin.barcode": str,
    "Pin.holderLength": float,
    "Pin.loopType": str,
    "Pin.name": str,
    "Pin.positionInPuck": int,
    "PinPosition.annotation": str,
    "PinPosition.name": str,
    "PinPosition.positionInPin": int,
    "Plate.annotation": str,
    "Plate.barcode": str,
    "Plate.identifiers": Dict[str, str],
    "Plate.name": str,
    "Plate.plateType": PlateType,
    "Plate.plateType.dropMapping": str,
    "Plate.plateType.name": str,
    "Plate.plateType.numberColumns": int,
    "Plate.plateType.numberRows": int,
    "Plate.plateType.numberSubPositions": int,
    "Plate.trackingDevice": TrackingDevice,
    "Plate.trackingDevice.apiTrackingUrl": str,
    "Plate.trackingDevice.deviceType": str,
    "Plate.trackingDevice.humanTrackingUrl": str,
    "Plate.trackingDevice.identifier": str,
    "PlateWell.annotation": str,
    "PlateWell.columnNumber": int,
    "PlateWell.name": str,
    "PlateWell.rowNumber": int,
    "Puck.annotation": str,
    "Puck.barcode": str,
    "Puck.name": str,
    "Puck.numberPositions": int,
    "Puck.positionInDewar": int,
    "Puck.puckType": str,
    "ReflectionSet.anisoBtensor": Tensor,
    "ReflectionSet.anisoBtensor.eigenvalues": List[float],
    "ReflectionSet.anisoBtensor.eigenvectors": List[List[float]],
    "ReflectionSet.anisotropicDiffraction": bool,
    "ReflectionSet.annotation": str,
    "ReflectionSet.binningMode": str,
    "ReflectionSet.diffractionLimitsEstimated": Tensor,
    "ReflectionSet.diffractionLimitsEstimated.eigenvalues": List[float],
    "ReflectionSet.diffractionLimitsEstimated.eigenvectors": List[List[float]],
    "ReflectionSet.fileType": str,
    "ReflectionSet.filename": str,
    "ReflectionSet.hIndexRange": List[int],
    "ReflectionSet.isoBWilsonEstimate": float,
    "ReflectionSet.kIndexRange": List[int],
    "ReflectionSet.lIndexRange": List[int],
    "ReflectionSet.numberBins": int,
    "ReflectionSet.numberReflections": int,
    "ReflectionSet.numberReflectionsUnique": int,
    "ReflectionSet.operationalResolution": float,
    "ReflectionSet.path": str,
    "ReflectionSet.possibleTwinning": bool,
    "ReflectionSet.refinedUnitCell": UnitCell,
    "ReflectionSet.refinedUnitCell.a": float,
    "ReflectionSet.refinedUnitCell.alpha": float,
    "ReflectionSet.refinedUnitCell.b": float,
    "ReflectionSet.refinedUnitCell.beta": float,
    "ReflectionSet.refinedUnitCell.c": float,
    "ReflectionSet.refinedUnitCell.gamma": float,
    "ReflectionSet.reflectionStatisticsOverall": ReflectionStatistics,
    "ReflectionSet.reflectionStatisticsOverall.CC_ano": float,
    "ReflectionSet.reflectionStatisticsOverall.CC_one_half": float,
    "ReflectionSet.reflectionStatisticsOverall.Completeness": float,
    "ReflectionSet.reflectionStatisticsOverall.CompletenessAno": float,
    "ReflectionSet.reflectionStatisticsOverall.CompletenessAnoEllipsoidal": float,
    "ReflectionSet.reflectionStatisticsOverall.CompletenessAnoSpherical": float,
    "ReflectionSet.reflectionStatisticsOverall.CompletenessEllipsoidal": float,
    "ReflectionSet.reflectionStatisticsOverall.CompletenessSpherical": float,
    "ReflectionSet.reflectionStatisticsOverall.I_over_SigI": float,
    "ReflectionSet.reflectionStatisticsOverall.R_meas": float,
    "ReflectionSet.reflectionStatisticsOverall.R_merge": float,
    "ReflectionSet.reflectionStatisticsOverall.R_pim": float,
    "ReflectionSet.reflectionStatisticsOverall.Redundancy": float,
    "ReflectionSet.reflectionStatisticsOverall.RedundancyAno": float,
    "ReflectionSet.reflectionStatisticsOverall.SigAno": float,
    "ReflectionSet.reflectionStatisticsOverall.chiSquared": float,
    "ReflectionSet.reflectionStatisticsOverall.numberObservations": int,
    "ReflectionSet.reflectionStatisticsOverall.numberObservationsUnique": int,
    "ReflectionSet.reflectionStatisticsOverall.numberReflectionsRejected": int,
    "ReflectionSet.reflectionStatisticsOverall.resolutionLimits": List[float],
    "ReflectionSet.reflectionStatisticsShells": List[ReflectionStatistics],
    "ReflectionSet.reflectionsPerBin": int,
    "ReflectionSet.reflectionsPerBinPerSweep": int,
    "ReflectionSet.resolutionCutoffs": ResolutionCutoffs,
    "ReflectionSet.resolutionCutoffs.CC_ano": float,
    "ReflectionSet.resolutionCutoffs.CC_one_half": float,
    "ReflectionSet.resolutionCutoffs.I_over_SigI": float,
    "ReflectionSet.resolutionCutoffs.R_meas": float,
    "ReflectionSet.resolutionCutoffs.R_merge": float,
    "ReflectionSet.resolutionCutoffs.R_pim": float,
    "ReflectionSet.resolutionCutoffs.SigAno": float,
    "ReflectionSet.resolutionRingsDetected": List[List[float]],
    "ReflectionSet.resolutionRingsExcluded": List[List[float]],
    "ReflectionSet.role": str,
    "ReflectionSet.signalCutoff": float,
    "ReflectionSet.signalType": str,
    "ReflectionSet.spaceGroupName": str,
    "ReflectionSet.twinFraction": float,
    "ReflectionSet.wavelengths": List[float],
    "Shipment.annotation": str,
    "Shipment.identifiers": Dict[str, str],
    "Shipment.labContactOutbound": Person,
    "Shipment.labContactOutbound.emailAddress": str,
    "Shipment.labContactOutbound.name": str,
    "Shipment.labContactOutbound.phoneNumber": str,
    "Shipment.labContactReturn": Person,
    "Shipment.labContactReturn.emailAddress": str,
    "Shipment.labContactReturn.name": str,
    "Shipment.labContactReturn.phoneNumber": str,
    "Shipment.name": str,
    "Shipment.proposalCode": str,
    "Shipment.sessionNumber": int,
    "Shipment.trackingDevice": TrackingDevice,
    "Shipment.trackingDevice.apiTrackingUrl": str,
    "Shipment.trackingDevice.deviceType": str,
    "Shipment.trackingDevice.humanTrackingUrl": str,
    "Shipment.trackingDevice.identifier": str,
    "WellDrop.annotation": str,
    "WellDrop.dropNumber": int,
    "WellDrop.name": str,
}
